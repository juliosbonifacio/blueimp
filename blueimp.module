<?php
/**
* @file
* Generates a Twitter Bootstrap Carousel with images carousel.
*
*/
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_theme().
 */
function blueimp_theme($existing, $type, $theme, $path) {
  return array(
    'block_gallery' => array(
      'variables' => array('data' => NULL),
    ),
  );
}

/**
 * Check the current path with the URL pages
 */
function blueimp_check_path($visibility, $pages) {
  $pages = \Drupal\Component\Utility\Unicode::strtolower($pages);
  //Get the current path
  $current_path = \Drupal::service('path.current')->getPath();
  //Get the path alias
  $path_alias = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

  // Convert the Drupal path to lowercase
  $path = \Drupal\Component\Utility\Unicode::strtolower($path_alias);
  //Remove the first slash "/"
  $path = $path ? preg_replace('/^(\/)?(.*)/', '$2', $path) : '';

  // Compare the lowercase internal and lowercase path alias (if any).
  $page_match = \Drupal::service('path.matcher')->matchPath($path, $pages);
  if ($path != $current_path) {
    $page_match = $page_match || \Drupal::service('path.matcher')->matchPath($current_path, $pages);
  }
  // When $block->visibility has a value of 0 (BLOCK_VISIBILITY_NOTLISTED),
  // the block is displayed on all pages except those listed in $block->pages.
  // When set to 1 (BLOCK_VISIBILITY_LISTED), it is displayed only on those
  // pages listed in $block->pages.
  $page_match = !($visibility xor $page_match);
  return $page_match;
}

/**
 * Check if the Blueimp library is installed.
 *
 * @return
 *   A boolean indicating the installed status.
 */
function blueimp_installed() {
  if (($library = libraries_detect('blueimp')) && !empty($library['installed'])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Check if the Blueimp library has been loaded.
 *
 * @return
 *   A boolean indicating the loaded status.
 */
function blueimp_library_loaded() {
  if (($library = libraries_load('blueimp')) && !empty($library['loaded'])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Get the image Style: blueimp_gallery and large
 *
 */
function getImageStyles($uri) {
  $images = array();

  if (!empty($uri)) {
    $image_cover = ImageStyle::load('blueimp_gallery')->buildUrl($uri);
    $image = ImageStyle::load('large')->buildUrl($uri);
    $images = array(
      'cover' => $image_cover,
      'large' => $image
    );
    return $images;
  }
  return NULL;
}

/**
 * Load Settings JS of the blueimp library
 */
function blueimp_load_init_js($settings) {
  $settings = $settings ? $settings : \Drupal::config('blueimp.settings')->get('blueimp_settings');
  $module_path = drupal_get_path('module', 'blueimp');
  $js = array(
         'module_path' => $module_path,
         'trigger' => $settings['trigger'],
         'startControls' => $settings['navigation']['startControls'],
         'hidePageScrollbars' => $settings['navigation']['hidePageScrollbars'],
         'carousel' => $settings['navigation']['carousel'],
         'startSlideshow' => $settings['navigation']['startSlideshow'],
         'continuous' => $settings['navigation']['continuous'],
         'slideshowInterval' => $settings['navigation']['slideshowInterval'],
         'transitionSpeed' => $settings['navigation']['transitionSpeed'],
    );
  return $js;
}

/**
 * hook_page_attachments_alter()
 * Load the Blueimp Library and their drupalSettings
 */
function blueimp_page_attachments_alter(&$page) {
  $settings = \Drupal::config('blueimp.settings')->get('blueimp_settings');
  if (blueimp_check_path($settings['visibility']['visibility'], $settings['visibility']['pages'])) {

    $js_settings = blueimp_load_init_js($settings);
    $page['#attached']['library'][] = 'blueimp/gallery';
    $page['#attached']['library'][] = 'blueimp/main';
    $page['#attached']['drupalSettings']['blueimp'] = $js_settings;
  }
}

function _blueimp_render($module, $block_id) {
  //$block = block_load($block_id);
  //$block_content = _block_render_blocks(array($block));
  //$build = _block_get_renderable_array($block_content);
  //$block_rendered = \Drupal::service("renderer")->render($build);

  //It's necessary to validate to render a block in D8
  $block_manager = \Drupal::service('plugin.manager.block');
  $block_config = [];
  $block_plugin = $block_manager->createInstance($block_id, $block_config);
  $block_build = $block_plugin->build();
  $block_rendered = render($block_build);

  return $block_rendered;
}
